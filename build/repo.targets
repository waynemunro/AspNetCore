<Project>
  <Import Project="RepositoryBuild.targets" />
  <Import Project="AzureIntegration.targets" />
  <Import Project="SharedFx.targets" />
  <Import Project="CodeSign.targets" />
  <Import Project="Publish.targets" />
  <Import Project="buildorder.props" />

  <PropertyGroup>
    <!-- Some projects need access to tasks bundled in KoreBuild. -->
    <BuildProperties>$(BuildProperties);BuildToolsTaskAssembly=$(_BuildToolsAssembly)</BuildProperties>

    <GeneratedPackageVersionPropsPath>$(IntermediateDir)dependencies.g.props</GeneratedPackageVersionPropsPath>
    <GeneratedRestoreSourcesPropsPath>$(IntermediateDir)sources.g.props</GeneratedRestoreSourcesPropsPath>

    <!-- Reset the default korebuild lifecycle. -->
    <BuildDependsOn>Prepare</BuildDependsOn>
    <!-- Map bootstrapper flags to KoreBuild targets -->
    <BuildDependsOn Condition=" '$(_RunRestore)' == 'true' ">$(BuildDependsOn);Restore</BuildDependsOn>
    <BuildDependsOn Condition=" '$(_RunBuild)' == 'true' ">$(BuildDependsOn);Compile</BuildDependsOn>
    <BuildDependsOn Condition=" '$(_RunPack)' == 'true' ">$(BuildDependsOn);Package</BuildDependsOn>
    <BuildDependsOn Condition=" '$(_RunTests)' == 'true' ">$(BuildDependsOn);Test;Verify</BuildDependsOn>
    <SkipTests Condition=" '$(_RunTests)' != 'true' ">true</SkipTests>
    <DisableCodeSigning Condition=" '$(_RunSign)' != 'true' OR '$(OS)' != 'Windows_NT' ">true</DisableCodeSigning>

    <PrepareDependsOn>SetTeamCityBuildNumberToVersion;$(PrepareDependsOn)</PrepareDependsOn>
    <PrepareDependsOn Condition=" '$(BuildAllProjects)' == 'true' ">$(PrepareDependsOn);VerifyPackageArtifactConfig;VerifyExternalDependencyConfig;PrepareOutputPaths</PrepareDependsOn>

    <CleanDependsOn>$(CleanDependsOn);CleanArtifacts;CleanRepoArtifacts</CleanDependsOn>

    <RestoreDependsOn>$(RestoreDependsOn);InstallDotNet;RestoreProjects</RestoreDependsOn>

    <CompileDependsOn />
    <CompileDependsOn Condition=" '$(_RunRestore)' == 'true' ">Restore</CompileDependsOn>
    <CompileDependsOn>$(CompileDependsOn);BuildProjects;PackSharedSources</CompileDependsOn>
    <CompileDependsOn Condition=" '$(BuildAllProjects)' == 'true' ">$(CompileDependsOn);PackProjects;BuildRepositories;BuildSharedFx</CompileDependsOn>

    <PackageDependsOn>$(PackageDependsOn);PackProjects</PackageDependsOn>
    <PackageDependsOn Condition=" '$(BuildAllProjects)' == 'true' ">$(PackageDependsOn);RemoveSharedFrameworkOnlyRefsFromNuspec</PackageDependsOn>

    <TestDependsOn />
    <TestDependsOn Condition=" '$(_RunBuild)' == 'true' ">$(TestDependsOn);Compile</TestDependsOn>
    <TestDependsOn>$(TestDependsOn);TestProjects</TestDependsOn>
    <TestDependsOn Condition=" '$(BuildAllProjects)' == 'true' ">$(TestDependsOn);_TestRepositories</TestDependsOn>

    <GetArtifactInfoDependsOn>$(GetArtifactInfoDependsOn);GetProjectArtifactInfo</GetArtifactInfoDependsOn>
    <GetArtifactInfoDependsOn>$(GetArtifactInfoDependsOn);ResolveSharedSourcesPackageInfo</GetArtifactInfoDependsOn>
    <GetArtifactInfoDependsOn Condition=" '$(BuildAllProjects)' == 'true' ">$(GetArtifactInfoDependsOn);ResolveRepoInfo</GetArtifactInfoDependsOn>

    <!-- Package modification must happen before code signing. -->
    <CodeSignDependsOn>$(CodeSignDependsOn);RemoveSharedFrameworkOnlyRefsFromNuspec</CodeSignDependsOn>
  </PropertyGroup>

  <Target Name="PrepareOutputPaths">
    <MakeDir Directories="$(ArtifactsDir);$(ProductPackageOutputPath);$(InternalPackageOutputPath)" />
  </Target>

  <Target Name="GenerateProjectList" DependsOnTargets="ResolveProjects">
    <MSBuild Projects="@(ProjectToBuild)"
             Targets="GetReferencesProvided"
             BuildInParallel="true"
             SkipNonexistentTargets="true"
             SkipNonexistentProjects="true" >

      <Output TaskParameter="TargetOutputs" ItemName="_ProjectReferenceProvider"/>
    </MSBuild>

    <PropertyGroup>
      <ProjectListFile>$(MSBuildThisFileDirectory)..\eng\ProjectReferences.props</ProjectListFile>
      <ProjectListContent>
      <![CDATA[
<!--
  This file is automatically generated. Run `build.cmd /t:GenerateProjectList` to update.

  This file contains a map of assembly names to the projects that build them.
-->
<Project>
  <ItemGroup>
    @(_ProjectReferenceProvider->'<ProjectReferenceProvider Include="%(Identity)" ProjectPath="%24(RepositoryRoot)%(ProjectFileRelativePath)" />', '%0A    ')
  </ItemGroup>
</Project>
      ]]>
      </ProjectListContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(ProjectListFile)" Lines="$(ProjectListContent)" Overwrite="true" />
  </Target>

  <Target Name="_ResolveProjectArtifactsInfoShipped" AfterTargets="GetProjectArtifactInfo">
    <ItemGroup>
      <ShippedArtifactInfo Include="@(ArtifactInfo)" Condition="'%(ArtifactInfo.IsShipped)' == 'true'" />
      <ArtifactInfo Remove="@(ShippedArtifactInfo)" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveRepoInfo" DependsOnTargets="_ResolveProjectArtifactsInfoShipped;_PrepareRepositories">
    <!-- We need to pass the NETCoreApp package versions to msbuild so that it doesn't complain about us using a different one than it was restored against.  -->
    <PropertyGroup>
      <DesignTimeBuildProps>$(BuildProperties);MicrosoftNETCoreAppPackageVersion=$(MicrosoftNETCoreAppPackageVersion);</DesignTimeBuildProps>
      <DesignTimeBuildProps>$(DesignTimeBuildProps);MicrosoftNETCoreApp30PackageVersion=$(MicrosoftNETCoreApp30PackageVersion);</DesignTimeBuildProps>
    </PropertyGroup>

    <ItemGroup>
      <_RepositoryProject Include="$(MSBuildProjectFullPath)" Condition="'%(Repository.Identity)' != ''">
        <AdditionalProperties>RepositoryRoot=%(Repository.RootPath)</AdditionalProperties>
        <Build>%(Repository.Build)</Build>
      </_RepositoryProject>
    </ItemGroup>

    <MSBuild Projects="@(_RepositoryProject)"
             Targets="GetArtifactInfo"
             Properties="$(DesignTimeBuildProps);Configuration=$(Configuration);VersionSuffix=$(VersionSuffix);BuildNumberSuffix=$(BuildNumberSuffix);DesignTimeBuild=true;"
             BuildInParallel="true">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <MSBuild Projects="@(ProjectToBuild)"
             Targets="GetArtifactInfo"
             Properties="$(DesignTimeBuildProps);Configuration=$(Configuration);VersionSuffix=$(VersionSuffix);BuildNumberSuffix=$(BuildNumberSuffix);DesignTimeBuild=true"
             SkipNonexistentTargets="true"
             BuildInParallel="true">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <MSBuild Projects="@(_RepositoryProject)"
             Targets="ResolveSolutions"
             Properties="$(DesignTimeBuildProps);Configuration=$(Configuration);VersionSuffix=$(VersionSuffix);BuildNumberSuffix=$(BuildNumberSuffix)"
             ContinueOnError="WarnAndContinue"
             BuildInParallel="true"
             Condition="@(_RepositoryProject->Count()) != 0">
      <Output TaskParameter="TargetOutputs" ItemName="Solution" Condition="'%(_RepositoryProject.Build)' == 'true'" />
      <Output TaskParameter="TargetOutputs" ItemName="_NoBuildSolution" Condition="'%(_RepositoryProject.Build)' != 'true'" />
    </MSBuild>

    <!--
      Analyze what was shipped in these repos.
      This is required so we can verify that cascading versions are consistent.
    -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="$(DesignTimeBuildProps);RepositoryRoot=%(ShippedRepository.RootPath);Configuration=$(Configuration);VersionSuffix=$(VersionSuffix);BuildNumberSuffix=$(BuildNumberSuffix);IsFinalBuild=true;DesignTimeBuild=true"
             ContinueOnError="WarnAndContinue"
             Condition="'%(ShippedRepository.Identity)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="ShippedArtifactInfo" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=%(ShippedRepository.RootPath);Configuration=$(Configuration);VersionSuffix=$(VersionSuffix);BuildNumberSuffix=$(BuildNumberSuffix)"
             ContinueOnError="WarnAndContinue"
             Condition="'%(ShippedRepository.Identity)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="_ShippedSolution" />
    </MSBuild>

    <ItemGroup>
      <_Temp Remove="@(_Temp)" />
      <_Temp Include="@(PackageArtifact)" />
      <PackageArtifact Remove="@(PackageArtifact)" />
    </ItemGroup>

    <Move SourceFiles="%(SubmoduleGlobalJsonFiles.BackupPath)" DestinationFiles="%(SubmoduleGlobalJsonFiles.Identity)" Condition="Exists(%(SubmoduleGlobalJsonFiles.BackupPath))" />

    <!-- Join required because shipping category is stored in artifact.props (PackageArtifact), but information about package ID and version comes from repos (ArtifactInfo). -->
    <RepoTasks.JoinRepoItems
      Left="@(_Temp)"
      LeftMetadata="*"
      Right="@(ArtifactInfo->WithMetadataValue('ArtifactType','NuGetPackage'));@(ShippedArtifactInfo->WithMetadataValue('ArtifactType','NuGetPackage'))"
      RightKey="PackageId"
      RightMetadata="Version">
      <Output TaskParameter="JoinResult" ItemName="PackageArtifact" />
    </RepoTasks.JoinRepoItems>

    <ItemGroup>
      <_PackageArtifactWithoutMatchingInfo Include="@(_Temp)" Exclude="@(PackageArtifact)" />
    </ItemGroup>

    <Error Text="Could not detect version information for package id:%0A * @(_PackageArtifactWithoutMatchingInfo, '%0A * ')"
           Condition="@(_PackageArtifactWithoutMatchingInfo->Count()) != 0" />

    <ItemGroup>
      <!-- Adjust the list of what is considered external vs locally built. -->
      <ExternalDependency Include="%(ShippedArtifactInfo.PackageId)" Condition="'%(ShippedArtifactInfo.ArtifactType)' == 'NuGetPackage'">
        <Version>%(ShippedArtifactInfo.Version)</Version>
      </ExternalDependency>

      <!-- capture the original list of PackageArtifacts -->
      <_PackageArtifactSpec Include="@(PackageArtifact)" />

      <PackageArtifact Remove="%(ShippedArtifactInfo.PackageId)" Condition="'%(ShippedArtifactInfo.ArtifactType)' == 'NuGetPackage'" />

      <Solution Update="@(Solution)" Build="true" IsPatching="true" />
      <_ShippedSolution Update="@(_ShippedSolution)" Build="false" IsPatching="false" />
      <_NoBuildSolution Update="@(_NoBuildSolution)" Build="false" />
      <Solution Include="@(_NoBuildSolution);@(_ShippedSolution)" />
    </ItemGroup>

    <Error Text="No solutions were found in '$(SubmoduleRoot)'. Did you forget to clone the submodules? Run `git submodule update --init`." Condition="@(Solution->Count()) == 0" />
  </Target>

  <Target Name="GeneratePropsFiles" DependsOnTargets="PrepareOutputPaths;GetArtifactInfo">
    <ItemGroup>
      <_LineupPackages Include="@(ExternalDependency)" />
      <_LineupPackages Include="%(ArtifactInfo.PackageId)" Version="%(ArtifactInfo.Version)" Condition=" '%(ArtifactInfo.ArtifactType)' == 'NuGetPackage' " />

      <_RestoreSources Include="$(ProductPackageOutputPath)" />
      <_RestoreSources Include="$(InternalPackageOutputPath)"  />
      <_RestoreSources Include="$(RestoreSources)" />
    </ItemGroup>

    <GeneratePackageVersionPropsFile
      Packages="@(_LineupPackages)"
      OutputPath="$(GeneratedPackageVersionPropsPath)" />

    <Copy SourceFiles="$(GeneratedPackageVersionPropsPath)" DestinationFolder="$(ArtifactsDir)" />

    <RepoTasks.GenerateRestoreSourcesPropsFile
      Sources="@(_RestoreSources)"
      OutputPath="$(GeneratedRestoreSourcesPropsPath)" />

    <Copy SourceFiles="$(GeneratedPackageVersionPropsPath);$(GeneratedBrandingPropsPath)" DestinationFolder="$(ArtifactsDir)" />
  </Target>

  <Target Name="CleanRepoArtifacts">
    <RemoveDir Directories="$(RepositoryRoot)obj" Condition="Exists('$(RepositoryRoot)obj')" />
  </Target>

  <Target Name="_PrepareRepositories">
    <ItemGroup>
      <Repository Update="%(Identity)" RootPath="$(SubmoduleRoot)%(Identity)\" Condition="'%(Identity)' != '' AND '%(RootPath)' == ''"  />
      <ShippedRepository Update="%(Identity)" RootPath="$(SubmoduleRoot)%(Identity)\" Condition="'%(Identity)' != '' AND '%(RootPath)' == ''" />

      <SubmoduleGlobalJsonFiles Include="%(Repository.RootPath)global.json" BackupPath="$(IntermediateDir)%(Repository.Identity)-global.json" Condition="'%(Repository.Identity)' != ''"/>
      <SubmoduleGlobalJsonFiles Include="%(ShippedRepository.RootPath)global.json" BackupPath="$(IntermediateDir)%(ShippedRepository.Identity)-global.json" Condition="'%(ShippedRepository.Identity)' != ''"/>
    </ItemGroup>

    <Move SourceFiles="%(SubmoduleGlobalJsonFiles.Identity)" DestinationFiles="%(SubmoduleGlobalJsonFiles.BackupPath)" Condition="Exists(%(SubmoduleGlobalJsonFiles.Identity))" />
  </Target>

  <Target Name="BuildRepositories"
     DependsOnTargets="_PrepareRepositories;GeneratePropsFiles;ComputeGraph;_BuildRepositories" />

  <Target Name="ComputeGraph" DependsOnTargets="ResolveSharedSourcesPackageInfo;GetProjectArtifactInfo;GetFxProjectArtifactInfo;ResolveRepoInfo;GeneratePropsFiles">
    <ItemGroup>
      <_UndeclaredPackageArtifact Include="%(ArtifactInfo.PackageId)" Condition="'%(ArtifactInfo.ArtifactType)' == 'NuGetPackage'" />
      <_UndeclaredPackageArtifact Remove="@(PackageArtifact)" />
      <RepositoryBuildOrder Remove="@(ShippedRepository)" />
    </ItemGroup>

    <Error Text="Undeclared package artifacts. Add these to artifacts.props:%0A  - @(_UndeclaredPackageArtifact, '%0A  - ')"
      Condition=" @(_UndeclaredPackageArtifact->Count()) != 0 " />

    <Message Text="Repository build order:" Importance="high" />
    <Message Text="%(RepositoryBuildOrder.Order). @(RepositoryBuildOrder, ', ')" Importance="high" />
  </Target>

  <Target Name="VerifyPackageArtifactConfig">
    <Error Text="Invalid configuration of %(PackageArtifact.Identity). PackageArtifact must have the 'Category' metadata."
           Condition="'%(PackageArtifact.Category)' == '' " />

    <ItemGroup>
      <ExternalDependencyInSharedFx Include="@(Dependency)" Exclude="@(PackageArtifact)" />
      <SharedFrameworkShippingPackage Include="@(SharedFrameworkOnlyPackage)" Exclude="@(SharedFrameworkAndPackage);@(ExternalDependencyInSharedFx);@(PackageArtifact->WithMetadataValue('Category','noship'))" />
    </ItemGroup>

    <Error Text="Assemblies which ship in the shared framework should not also ship as NuGet packages, unless explicitly allowed. Please update the following to 'noship': %0A - @(SharedFrameworkShippingPackage, '%0A - '). "
           Condition=" @(SharedFrameworkShippingPackage->Count()) != 0 " />
  </Target>

  <!-- This is temporary until we can use FrameworkReference to build our own packages. -->
  <Target Name="RemoveSharedFrameworkOnlyRefsFromNuspec">
    <ItemGroup>
      <_BuildOutput Include="$(ProductPackageOutputPath)%(PackageArtifact.Identity).*.nupkg"
                    Condition=" '%(PackageArtifact.Category)' == 'ship' " />

      <SharedFxPackageRefToHide Include="@(SharedFrameworkOnlyPackage)" Exclude="@(ExternalDependency)" />
    </ItemGroup>

    <RepoTasks.RemoveSharedFrameworkDependencies Condition="@(_BuildOutput->Count()) != 0"
      Files="@(_BuildOutput)"
      FrameworkOnlyPackages="@(SharedFxPackageRefToHide)" />
  </Target>

  <Target Name="VerifyExternalDependencyConfig">
    <Error Text="Missing Version metadata for the following external dependencies: %0A - @(ExternalDependency->WithMetadataValue('Version', ''), '%0A - '). "
           Condition=" @(ExternalDependency->WithMetadataValue('Version', '')->Count()) != 0 " />
  </Target>

  <Target Name="FastCheck"
    DependsOnTargets="ComputeGraph;VerifyPackageArtifactConfig" />

</Project>
